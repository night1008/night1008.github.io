<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Night1008</title><link>https://night1008.github.io</link><description>静以修身，俭以养德</description><copyright>Night1008</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://night1008.github.io</link></image><lastBuildDate>Thu, 12 Sep 2024 09:50:03 +0000</lastBuildDate><managingEditor>Night1008</managingEditor><ttl>60</ttl><webMaster>Night1008</webMaster><item><title>Clickhouse 留存分析中如何计算分析主体的留存情况</title><link>https://night1008.github.io/post/Clickhouse%20-liu-cun-fen-xi-zhong-ru-he-ji-suan-fen-xi-zhu-ti-de-liu-cun-qing-kuang.html</link><description>## 背景&#13;
&#13;
先明确留存分析相关的概念，&#13;
**留存分析**：衡量不同批次新增用户的数据表现，最常见的就是留存率&#13;
**分析主体**：触发事件的主体，比如用户&#13;
**初始事件**：代表新增的事件，比如用户注册&#13;
**回访事件**：代表活跃的事件，比如用户登录&#13;
**回访用户同时参与事件**：代表活跃的事件，比如用户充值&#13;
&#13;
## 需求&#13;
&#13;
产品给出的关于留存定义为：**某天完成了初始事件的分析主体，在初始事件日期后的第 1 日至第 N 日有完成“回访事件”，即为第 N 日的“留存用户”**。</description><guid isPermaLink="true">https://night1008.github.io/post/Clickhouse%20-liu-cun-fen-xi-zhong-ru-he-ji-suan-fen-xi-zhu-ti-de-liu-cun-qing-kuang.html</guid><pubDate>Thu, 12 Sep 2024 09:49:38 +0000</pubDate></item><item><title>Clickhouse 留存分析中如何计算分析主体的流失数</title><link>https://night1008.github.io/post/Clickhouse%20-liu-cun-fen-xi-zhong-ru-he-ji-suan-fen-xi-zhu-ti-de-liu-shi-shu.html</link><description>### 背景&#13;
&#13;
先明确留存分析相关的概念&#13;
**留存分析**：衡量不同批次新增用户的数据表现，最常见的就是留存率&#13;
**分析主体**：触发事件的主体，比如用户&#13;
**初始事件**：代表新增的事件，比如用户注册&#13;
**回访事件**：代表活跃的事件，比如用户登录&#13;
&#13;
---&#13;
&#13;
### 需求&#13;
&#13;
产品给出的流失定义为：某天完成了初始事件的分析主体，在初始事件日期后的第 1 日至第 N 日都没有完成“回访事件”，即为第 N 日的“流失用户”。</description><guid isPermaLink="true">https://night1008.github.io/post/Clickhouse%20-liu-cun-fen-xi-zhong-ru-he-ji-suan-fen-xi-zhu-ti-de-liu-shi-shu.html</guid><pubDate>Mon, 19 Aug 2024 08:25:07 +0000</pubDate></item><item><title>看过的电影合集</title><link>https://night1008.github.io/post/kan-guo-de-dian-ying-he-ji.html</link><description>电影链接到 [豆瓣电影](https://movie.douban.com)&#13;
---&#13;
&#13;
- [ ] [九龙城寨之围城](https://movie.douban.com/subject/24284175) (一般)&#13;
- [ ] [年会不能停](https://movie.douban.com/subject/35725869) (还可以)&#13;
- [ ] [三大队](https://movie.douban.com/subject/35208463) (还可以)&#13;
- [ ] [孤注一掷](https://movie.douban.com/subject/35267224) (还可以)&#13;
- [ ] [瀑布](https://movie.douban.com/subject/35242938) (还可以)&#13;
- [ ] [周处除三害](https://movie.douban.com/subject/36151692) (还可以)&#13;
- [ ] [老狐狸](https://movie.douban.com/subject/35611467) (不错)&#13;
- [ ] [破墓](https://movie.douban.com/subject/35490167) (还可以)&#13;
- [ ] [首](https://movie.douban.com/subject/35359717) (还可以)&#13;
- [ ] [沙丘1](https://movie.douban.com/subject/3001114) (还可以)&#13;
- [ ] [沙丘2](https://movie.douban.com/subject/35575567) (还可以)&#13;
- [ ] [月满轩尼诗](https://movie.douban.com/subject/3777800) (还可以)。</description><guid isPermaLink="true">https://night1008.github.io/post/kan-guo-de-dian-ying-he-ji.html</guid><pubDate>Sat, 06 Jul 2024 14:59:53 +0000</pubDate></item><item><title>Go recover from panic</title><link>https://night1008.github.io/post/Go%20recover%20from%20panic.html</link><description>```go&#13;
package main&#13;
&#13;
import (&#13;
	'fmt'&#13;
	'runtime/debug'&#13;
	'time'&#13;
&#13;
	'github.com/rs/zerolog/log'&#13;
)&#13;
&#13;
func Recover() {&#13;
	if r := recover(); r != nil {&#13;
		debugStack := string(debug.Stack())&#13;
		fmt.Println(debugStack)&#13;
		log.Error().Err(fmt.Errorf('%s', debugStack)).Msg('recover from panic')&#13;
	}&#13;
}&#13;
&#13;
func main() {&#13;
	go func() {&#13;
		defer Recover()&#13;
		var ss []string&#13;
		fmt.Println(ss[1])&#13;
	}()&#13;
&#13;
	time.Sleep(100 * time.Millisecond)&#13;
&#13;
	fmt.Println('===&gt; enter end')&#13;
}&#13;
```。</description><guid isPermaLink="true">https://night1008.github.io/post/Go%20recover%20from%20panic.html</guid><pubDate>Fri, 05 Jul 2024 09:30:36 +0000</pubDate></item><item><title>Go 如何实现事件分析分组排序</title><link>https://night1008.github.io/post/Go%20-ru-he-shi-xian-shi-jian-fen-xi-fen-zu-pai-xu.html</link><description>事件分析过程中，会对分组进行排序，有如下的排序规则，&#13;
&#13;
1. 按第一个指标值的正序排列&#13;
2. 按第一个指标值的倒序排列&#13;
3. 按分组值的正序排列&#13;
4. 按分组值的倒序排列&#13;
&#13;
分组是 `[][]string` 类型，值是 `float64` 类型，&#13;
&#13;
下面记录下主要的排序代码&#13;
&#13;
```go&#13;
const (&#13;
	PropertyTypeInteger              = 'integer'                // 整数类型&#13;
	PropertyTypeFloat                = 'float'                  // 浮点类型，对应 float64 或 double&#13;
	PropertyTypeNumber               = 'number'                 // 浮点类型，对应 float64 或 double&#13;
)&#13;
&#13;
type EventModelQueryGroupBy struct {&#13;
	Name              string    `json:'name' example:'_time'`&#13;
	Type              string    `json:'type' example:'timestamp'`&#13;
	Title             string    `json:'title' example:'事件发生时间'`&#13;
	TableType         string    `json:'table_type' example:'event'`&#13;
	MetaType          string    `json:'meta_type' example:'custom'`&#13;
}&#13;
&#13;
// 根据分组值排序&#13;
func sortUnionGroupsByValue(unionGroups [][]string, unionGroupsValueMap map[string]float64, unionGroupsJoinSymbol string, sortByAsc bool) [][]string {&#13;
	newUnionGroups := make([][]string, len(unionGroups))&#13;
	copy(newUnionGroups, unionGroups)&#13;
	sort.Slice(newUnionGroups, func(i, j int) bool {&#13;
		sortValue := false&#13;
		if sortByAsc {&#13;
			sortValue = unionGroupsValueMap[strings.Join(newUnionGroups[i], unionGroupsJoinSymbol)] &lt; unionGroupsValueMap[strings.Join(newUnionGroups[j], unionGroupsJoinSymbol)]&#13;
		} else {&#13;
			sortValue = unionGroupsValueMap[strings.Join(newUnionGroups[i], unionGroupsJoinSymbol)] &gt; unionGroupsValueMap[strings.Join(newUnionGroups[j], unionGroupsJoinSymbol)]&#13;
		}&#13;
		return sortValue&#13;
	})&#13;
	return newUnionGroups&#13;
}&#13;
&#13;
// 根据分组名称排序&#13;
func sortUnionGroupsByGroup(unionGroups [][]string, unionGroupBy []*EventModelQueryGroupBy, sortByAsc bool) [][]string {&#13;
	newUnionGroups := make([][]string, len(unionGroups))&#13;
	copy(newUnionGroups, unionGroups)&#13;
	sort.Slice(newUnionGroups, func(i, j int) bool {&#13;
		sortValue := false&#13;
		for index := range unionGroupBy {&#13;
			if newUnionGroups[i][index] != newUnionGroups[j][index] {&#13;
				switch unionGroupBy[index].Type {&#13;
				case PropertyTypeInteger, PropertyTypeNumber:&#13;
					if sortByAsc {&#13;
						sortValue = sortValue || parseNumberRangeSortValue(newUnionGroups[i][index]) &lt; parseNumberRangeSortValue(newUnionGroups[j][index])&#13;
					} else {&#13;
						sortValue = sortValue || parseNumberRangeSortValue(newUnionGroups[i][index]) &gt; parseNumberRangeSortValue(newUnionGroups[j][index])&#13;
					}&#13;
				default:&#13;
					if sortByAsc {&#13;
						sortValue = sortValue || newUnionGroups[i][index] &lt; newUnionGroups[j][index]&#13;
					} else {&#13;
						sortValue = sortValue || newUnionGroups[i][index] &gt; newUnionGroups[j][index]&#13;
					}&#13;
				}&#13;
				break&#13;
			}&#13;
		}&#13;
		return sortValue&#13;
	})&#13;
	return newUnionGroups&#13;
}&#13;
&#13;
// 对数值类型分组值拆分得到排序值 [-∞, 100), [-1, 2), 100, (null)&#13;
func parseNumberRangeSortValue(valueStr string) float64 {&#13;
	firstPartValue := strings.SplitN(valueStr, ',', 2)[0]&#13;
	firstPartValue = strings.TrimLeft(firstPartValue, '[')&#13;
	switch firstPartValue {&#13;
	case '-∞':&#13;
		return math.Inf(-1)&#13;
	case '(null)':&#13;
		return math.NaN()&#13;
	default:&#13;
		value, err := strconv.ParseFloat(firstPartValue, 64)&#13;
		if err != nil {&#13;
			return math.Inf(-1)&#13;
		}&#13;
		return value&#13;
	}&#13;
}&#13;
```。</description><guid isPermaLink="true">https://night1008.github.io/post/Go%20-ru-he-shi-xian-shi-jian-fen-xi-fen-zu-pai-xu.html</guid><pubDate>Thu, 04 Jul 2024 07:01:03 +0000</pubDate></item><item><title>Go mod 如何替换 fork 的包和版本</title><link>https://night1008.github.io/post/Go%20mod%20-ru-he-ti-huan-%20fork%20-de-bao-he-ban-ben.html</link><description>以  `github.com/prashanthpai/sqlcache` 为例，想替换成 fork 的包 `github.com/night1008/sqlcache`，&#13;
假设当前该包的版本为 `v0.0.0`&#13;
&#13;
#### 第一步&#13;
```&#13;
go mod edit -replace github.com/prashanthpai/sqlcache@v0.0.0=github.com/night1008/sqlcache@master&#13;
```&#13;
&#13;
---&#13;
&#13;
#### 第二步&#13;
```&#13;
go get -u github.com/night1008/sqlcache&#13;
```&#13;
&#13;
会有以下提示&#13;
```&#13;
go: downloading github.com/night1008/sqlcache v0.0.0-20240623031410-4d47c940a2d7&#13;
go: github.com/night1008/sqlcache@v0.0.0-20240623031410-4d47c940a2d7: parsing go.mod:&#13;
	module declares its path as: github.com/prashanthpai/sqlcache&#13;
	        but was required as: github.com/night1008/sqlcache&#13;
```&#13;
&#13;
---&#13;
&#13;
#### 第三步&#13;
&#13;
手动把 v0.0.0-20240623031410-4d47c940a2d7 替换到 go.mod `replace github.com/prashanthpai/sqlcache v0.0.0 =&gt; github.com/night1008/sqlcache master` 这一行的 master&#13;
&#13;
---&#13;
&#13;
#### 第四步&#13;
```&#13;
go mod tidy&#13;
```。</description><guid isPermaLink="true">https://night1008.github.io/post/Go%20mod%20-ru-he-ti-huan-%20fork%20-de-bao-he-ban-ben.html</guid><pubDate>Wed, 26 Jun 2024 06:52:27 +0000</pubDate></item><item><title>如何使用 GORM 创建或者更新数据库记录</title><link>https://night1008.github.io/post/ru-he-shi-yong-%20GORM%20-chuang-jian-huo-zhe-geng-xin-shu-ju-ku-ji-lu.html</link><description>写业务过程中，经过会遇到当数据不存在则创建记录，已存在则更新记录的情况，&#13;
&#13;
一开始使用一下代码中的第一种方式，发现没生效，后面改成第二种才生效，在此记录一下。</description><guid isPermaLink="true">https://night1008.github.io/post/ru-he-shi-yong-%20GORM%20-chuang-jian-huo-zhe-geng-xin-shu-ju-ku-ji-lu.html</guid><pubDate>Sat, 22 Jun 2024 04:12:24 +0000</pubDate></item><item><title>Go 如何实现 Clickhouse 查询缓存</title><link>https://night1008.github.io/post/Go%20-ru-he-shi-xian-%20Clickhouse%20-cha-xun-huan-cun.html</link><description>**整体思路：先判断是否命中缓存，没有的话再进入查询队列**&#13;
&#13;
依赖的包&#13;
```&#13;
https://github.com/ClickHouse/ClickHouse&#13;
&#13;
https://github.com/prashanthpai/sqlcache =&gt; https://github.com/night1008/sqlcache&#13;
&#13;
https://github.com/DATA-DOG/go-sqlmock&#13;
&#13;
https://github.com/blockloop/scan&#13;
```&#13;
&#13;
现在的问题是 clickhouse 的查询结果可能返回复杂类型，比如 Map(String, UInt8)，&#13;
如果命中缓存，缓存的结果为 `driver.Rows`，需要转换成 `*sql.Rows` 方便后续使用，&#13;
因此想到通过 `sqlmock` 的方式，但是默认的 `value converter` 是 `driver.DefaultParameterConverter`，只能转换基础类型，&#13;
复杂类型也没有定义专门用于解析的结构体，会报诸如以下的错误，&#13;
&#13;
&gt; panic: row #1, column #2 ('mapper') type map[string]uint8: unsupported type map[string]uint8, a map&#13;
&#13;
好在 `go-sqlmock` 可以指定 `ValueConverterOption`，这样就可以把 `driver.Rows` 转换成 `*sql.Rows` 了。</description><guid isPermaLink="true">https://night1008.github.io/post/Go%20-ru-he-shi-xian-%20Clickhouse%20-cha-xun-huan-cun.html</guid><pubDate>Sun, 09 Jun 2024 06:43:22 +0000</pubDate></item><item><title>Go 有趣的代码片段</title><link>https://night1008.github.io/post/Go%20-you-qu-de-dai-ma-pian-duan.html</link><description>### 可以对 error 进行 switch 判断&#13;
&#13;
来源 https://github.com/prashanthpai/sqlcache/blob/4bf943bfd00f02394a480c5437e86af4b5be074c/cache_redis.go#L24&#13;
&#13;
```go&#13;
func (r *Redis) Get(ctx context.Context, key string) (*cache.Item, bool, error) {&#13;
	b, err := r.c.Get(ctx, r.keyPrefix+key).Bytes()&#13;
	switch err {&#13;
	case nil:&#13;
		var item cache.Item&#13;
		if err := msgpack.Unmarshal(b, &amp;item); err != nil {&#13;
			return nil, true, err&#13;
		}&#13;
		return &amp;item, true, nil&#13;
	case redis.Nil:&#13;
		return nil, false, nil&#13;
	default:&#13;
		return nil, false, err&#13;
	}&#13;
}&#13;
```。</description><guid isPermaLink="true">https://night1008.github.io/post/Go%20-you-qu-de-dai-ma-pian-duan.html</guid><pubDate>Sat, 01 Jun 2024 13:01:05 +0000</pubDate></item><item><title>分析平台中的业务关系图</title><link>https://night1008.github.io/post/fen-xi-ping-tai-zhong-de-ye-wu-guan-xi-tu.html</link><description>### 用户和应用角色之间的关系&#13;
![user_role_permission](https://github.com/night1008/night1008.github.io/assets/3940006/214e5136-2ac8-453f-8ddb-e4cd865e4027)&#13;
&#13;
---&#13;
&#13;
### 表和属性之间的关系&#13;
![event_property](https://github.com/night1008/night1008.github.io/assets/3940006/33933ff6-4c26-434b-a190-3ed98f2b5bc9)&#13;
&#13;
&#13;
---&#13;
&#13;
### 看板空间和看板之间的关系&#13;
![dashboard_space](https://github.com/night1008/night1008.github.io/assets/3940006/40200478-f311-40a1-ba05-1e3e0a80a394)&#13;
。</description><guid isPermaLink="true">https://night1008.github.io/post/fen-xi-ping-tai-zhong-de-ye-wu-guan-xi-tu.html</guid><pubDate>Thu, 25 Apr 2024 09:17:32 +0000</pubDate></item><item><title>如何在 iOS 上安装 PokeMMO</title><link>https://night1008.github.io/post/ru-he-zai-%20iOS%20-shang-an-zhuang-%20PokeMMO.html</link><description>准备条件：&#13;
1.  [PokeMMO Account](https://pokemmo.com/en/)&#13;
2. [AltStore](https://iosdroids.com/altstore/)&#13;
3. [PokeMMO ROMS](https://iosdroids.com/pokemmo-ios/)&#13;
&#13;
找了好久总算在 [How to Download &amp; Install PokeMMO on iOS?](https://iosdroids.com/pokemmo-ios/) 找到可下载的 PokeMMO ROMS.&#13;
。</description><guid isPermaLink="true">https://night1008.github.io/post/ru-he-zai-%20iOS%20-shang-an-zhuang-%20PokeMMO.html</guid><pubDate>Sun, 14 Apr 2024 14:55:47 +0000</pubDate></item><item><title>clickhouse-go 某些查询不会返回查询错误</title><link>https://night1008.github.io/post/clickhouse-go%20-mou-xie-cha-xun-bu-hui-fan-hui-cha-xun-cuo-wu.html</link><description>使用 [clickhouse-go](https://github.com/ClickHouse/clickhouse-go) 作为客户端进行 clickhouse 查询时，发现某些查询不会返回查询错误，&#13;
1. 查询时间超过最大查询时间参数 (max_execution_time)&#13;
2. 非法查询，比如 sleep(300)&#13;
&#13;
下面给示例，&#13;
&#13;
```go&#13;
package main&#13;
&#13;
import (&#13;
	'context'&#13;
	'fmt'&#13;
	'log'&#13;
&#13;
	'github.com/ClickHouse/clickhouse-go/v2'&#13;
)&#13;
&#13;
func main() {&#13;
	db := clickhouse.OpenDB(&amp;clickhouse.Options{&#13;
		Addr: []string{'127.0.0.1:9000'},&#13;
		Auth: clickhouse.Auth{&#13;
			Database: 'default',&#13;
			Username: 'default',&#13;
			Password: '',&#13;
		},&#13;
		Settings: clickhouse.Settings{&#13;
			'join_use_nulls': 1,&#13;
		},&#13;
	})&#13;
&#13;
	ctx := context.Background()&#13;
	conn, err := db.Conn(ctx)&#13;
	if err != nil {&#13;
		log.Fatal(err)&#13;
	}&#13;
	defer conn.Close()&#13;
&#13;
	sql := 'select sleep(300)'&#13;
	rows, err := conn.QueryContext(ctx, sql)&#13;
	if err != nil {&#13;
		log.Fatal(err)&#13;
	}&#13;
	defer rows.Close()&#13;
&#13;
	fmt.Println(rows.Columns())&#13;
}&#13;
```&#13;
&#13;
期望结果是，&#13;
```&#13;
code: 160, message: The maximum sleep time is 3000000 microseconds. Requested: 300: while executing 'FUNCTION sleep(300 :: 0) -&gt; sleep(300) UInt8 : 1'&#13;
```&#13;
&#13;
执行结果是，&#13;
```&#13;
[sleep(300)] &lt;nil&gt;&#13;
```&#13;
&#13;
---&#13;
&#13;
问了官方，说是，&#13;
Since the error is not thrown in ClickHouse at the time of query retrieval but later with the data packet, the client has to process data received from the server explicitly using rows.Next().&#13;
&#13;
See code snippet:&#13;
```go&#13;
package issues&#13;
&#13;
import (&#13;
	'context'&#13;
	'testing'&#13;
&#13;
	clickhouse_tests 'github.com/ClickHouse/clickhouse-go/v2/tests'&#13;
	'github.com/stretchr/testify/assert'&#13;
	'github.com/stretchr/testify/require'&#13;
)&#13;
&#13;
func Test1268(t *testing.T) {&#13;
	conn, err := clickhouse_tests.GetDatabaseSQLConnection('issues', nil, nil, nil)&#13;
	require.NoError(t, err)&#13;
&#13;
	rows, err := conn.QueryContext(context.Background(), 'select sleep(300)')&#13;
	require.NoError(t, err)&#13;
	defer rows.Close()&#13;
&#13;
	for rows.Next() {&#13;
		if rows.Err() != nil {&#13;
			break&#13;
		}&#13;
	}&#13;
&#13;
	assert.ErrorContains(t, rows.Err(), 'code: 160, message: The maximum sleep time is 3000000 microseconds.')&#13;
}&#13;
```。</description><guid isPermaLink="true">https://night1008.github.io/post/clickhouse-go%20-mou-xie-cha-xun-bu-hui-fan-hui-cha-xun-cuo-wu.html</guid><pubDate>Sun, 14 Apr 2024 04:00:07 +0000</pubDate></item><item><title>Go 语言下如何提交包含反引号的多行字符串表单</title><link>https://night1008.github.io/post/Go%20-yu-yan-xia-ru-he-ti-jiao-bao-han-fan-yin-hao-de-duo-xing-zi-fu-chuan-biao-dan.html</link><description>感觉 Go 语言对于多行字符串的支持不是很友好。</description><guid isPermaLink="true">https://night1008.github.io/post/Go%20-yu-yan-xia-ru-he-ti-jiao-bao-han-fan-yin-hao-de-duo-xing-zi-fu-chuan-biao-dan.html</guid><pubDate>Sun, 14 Apr 2024 03:57:34 +0000</pubDate></item><item><title>如何实现超管登录</title><link>https://night1008.github.io/post/ru-he-shi-xian-chao-guan-deng-lu.html</link><description>对于 ToC 平台，随着接入应用的增加，用户反馈的问题也变多，&#13;
日志没有记录到的话，加上现有的权限体系下查看问题不方便，&#13;
很难复现问题，需要一个个加到对应的应用中。</description><guid isPermaLink="true">https://night1008.github.io/post/ru-he-shi-xian-chao-guan-deng-lu.html</guid><pubDate>Thu, 15 Feb 2024 04:40:48 +0000</pubDate></item><item><title>如何进行前后端静态资源分离</title><link>https://night1008.github.io/post/ru-he-jin-xing-qian-hou-duan-jing-tai-zi-yuan-fen-li.html</link><description>我目前开发的平台的前端静态资源是使用 [go embed](https://pkg.go.dev/embed) 机制内嵌到后端服务中，&#13;
当访问量比较大的时候，服务器会有比较大的 IO 消耗，因此进行前端静态资源分离。</description><guid isPermaLink="true">https://night1008.github.io/post/ru-he-jin-xing-qian-hou-duan-jing-tai-zi-yuan-fen-li.html</guid><pubDate>Wed, 14 Feb 2024 04:40:48 +0000</pubDate></item></channel></rss>